'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _map = require('babel-runtime/core-js/map');

var _map2 = _interopRequireDefault(_map);

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

exports.createHierarchy = createHierarchy;
exports.resolveStoryHierarchy = resolveStoryHierarchy;
exports.prepareStoriesForHierarchy = prepareStoriesForHierarchy;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function findMatches(matches, type, value) {
  if (!matches) {
    return null;
  }

  var matchForType = matches.filter(function (match) {
    return match.key === type;
  }).find(function (match) {
    return match.value === value;
  });

  if (!matchForType) {
    return null;
  }

  return matchForType.indices;
}

function createNamespaceNode(namespace, hierarchy, story) {
  return {
    isNamespace: true,
    name: namespace,
    namespaces: [].concat((0, _toConsumableArray3.default)(hierarchy.namespaces), [namespace]),
    highlight: findMatches(story.matches, 'namespaces', namespace),
    map: new _map2.default()
  };
}

function fillHierarchy(namespaces, hierarchy, story) {
  var namespace = namespaces[0];
  var childHierarchy = hierarchy.map.get(namespace);

  if (!childHierarchy) {
    childHierarchy = createNamespaceNode(namespace, hierarchy, story);
    hierarchy.map.set(namespace, childHierarchy);
  }

  if (namespaces.length === 1) {
    childHierarchy.kind = story.kind;
    childHierarchy.stories = story.stories.map(function (s) {
      return {
        name: s,
        highlight: findMatches(story.matches, 'stories', s)
      };
    });

    return;
  }

  fillHierarchy(namespaces.slice(1), childHierarchy, story);
}

function createHierarchy(stories) {
  var hierarchyRoot = {
    isNamespace: true,
    namespaces: [],
    name: '',
    map: new _map2.default()
  };

  if (stories) {
    stories.forEach(function (story) {
      var namespaces = story.namespaces;

      var name = namespaces[namespaces.length - 1];

      fillHierarchy(namespaces, hierarchyRoot, (0, _extends3.default)({}, story, { name: name }));
    });
  }

  return hierarchyRoot;
}

function resolveStoryHierarchy() {
  var storyName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  var hierarchySeparator = arguments[1];

  if (!hierarchySeparator) {
    return [storyName];
  }

  return storyName.split(new RegExp(hierarchySeparator));
}

function prepareStoriesForHierarchy(stories, hierarchySeparator) {
  if (!stories) {
    return null;
  }

  return stories.map(function (story) {
    var namespaces = resolveStoryHierarchy(story.kind, hierarchySeparator);

    return (0, _extends3.default)({}, story, {
      namespaces: namespaces
    });
  });
}